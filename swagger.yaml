openapi: 3.0.0
info:
  title: Blog API with Bcrypt
  version: 1.0.0
  description: RESTful API for a blog with secure password hashing
paths:
  /api/users/register:
    post:
      summary: Register a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string }
                email: { type: string }
      responses:
        '201': { description: User created }
        '400': { description: Bad request }
  /api/users/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        '200': { description: JWT token }
        '401': { description: Unauthorized }
  /api/posts:
    get:
      summary: Get published posts
      responses:
        '200': { description: List of posts }
    post:
      summary: Create a post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                content: { type: string }
                published: { type: boolean }
      responses:
        '201': { description: Post created }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
  /api/posts/{id}:
    put:
      summary: Update a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
          description: The post ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title: { type: string }
                content: { type: string }
                published: { type: boolean }
      responses:
        '200': { description: Post updated }
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '404': { description: Post not found or unauthorized }
    delete:
      summary: Delete a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
          description: The post ID
      responses:
        '204': { description: Post deleted }
        '401': { description: Unauthorized }
        '404': { description: Post not found or unauthorized }
  /api/comments:
    post:
      summary: Create a comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content: { type: string }
                username: { type: string }
                email: { type: string }
                post_id: { type: integer }
      responses:
        '201': { description: Comment created }
        '400': { description: Bad request }
  /api/comments/post/{postId}:
    get:
      summary: Get comments for a post
      parameters:
        - in: path
          name: postId
          required: true
          schema: { type: integer }
      responses:
        '200': { description: List of comments }
  /api/comments/{id}:
    delete:
      summary: Delete a comment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
          description: The comment ID
      responses:
        '204': { description: Comment deleted }
        '401': { description: Unauthorized }
        '404': { description: Comment not found or unauthorized }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT